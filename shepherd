#!/bin/bash
set -euo pipefail

server_version() {
  docker version -f "{{.Server.Version}}"
}

current_user() {
  whoami
}

update_services() {
  local blacklist="$1"
  local supports_detach_option=$2
  local detach_option=""
  [ $supports_detach_option = true ] && detach_option="--detach=false"
  local force_registry_auth=$3
  local with_registry_auth=""
  [ $force_registry_auth = true ] && with_registry_auth="--with-registry-auth"

  for service in $(IFS="\n" docker service ls --quiet); do
    local name image_with_digest image
    name="$(docker service inspect "$service" -f '{{.Spec.Name}}')"
    if [[ " $blacklist " != *" $name "* ]]; then
      image_with_digest="$(docker service inspect "$service" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}')"
      image=$(echo "$image_with_digest" | cut -d@ -f1)
      echo "Updating service $name with image $image (using flags: $detach_option $with_registry_auth)"
      docker service update "$service" $detach_option $with_registry_auth --image="$image" > /dev/null
    fi
  done
}

main() {
  local blacklist sleep_time supports_detach_option with_registry_auth
  blacklist="${BLACKLIST_SERVICES:-}"
  sleep_time="${SLEEP_TIME:-5m}"

  echo "Current user: $(current_user)"

  supports_detach_option=false
  if [[ "$(server_version)" > "17.05" ]]; then
    supports_detach_option=true
    echo "Enabling synchronous service updates"
  else
    supports_detach_option=false
  fi

  force_registry_auth=false
  if [[ "$(server_version)" > "17.05" ]]; then
    force_registry_auth=true
    echo "Force with registry auth due to bug in 17.06"
  else
    force_registry_auth=false
  fi

  [[ "$blacklist" != "" ]] && echo "Excluding services: $blacklist"

  while true; do
    update_services "$blacklist" "$supports_detach_option" "$force_registry_auth"
    echo "Sleeping $sleep_time before next update"
    sleep "$sleep_time"
  done
}

main "$@"
